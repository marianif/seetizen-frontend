# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type User @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  # username: String! @index(name: "byUsername", queryField: "list")
  name: String!
  bio: String
  label: String
  credits: Int
  latitude: Float
  longitude: Float
  avatarKey: String
  partecipations: [Partecipation] @hasMany
  createdEvent: [Event] @hasMany
  # groups: [Group] @hasMany #
  joined_groups: String # list id gruppi di cui è membro
  administrated_groups: String # list id gruppi di cui è admin
  articles: [Article] @hasMany
  isVerified: Boolean
  verificationCount: Int # Max 3
  # isBlocked: Boolean
  notificationToken: String
  phoneNumber: String
    @index(name: "byPhoneNumber", queryField: "listUsersByPhoneNumber")
  phonePrefix: String
  searcheable: Boolean
  tagIDS: String @default(value: "[]") # ci serve per eseguire la query
  viewport: String
}

type Group @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  label: String!
  bio: String
  credits: Int @default(value: "0")
  adminsIDS: String @default(value: "[]")
  editorsIDS: String @default(value: "[]")
  membersIDS: String @default(value: "[]")
  bannedIDS: String @default(value: "[]")
  avatarKey: String!
  category: String
  events: [Event] @hasMany
  articles: [Article] @hasMany
  latitude: Float!
  longitude: Float!
  # tags: String
  tagIDS: String @default(value: "[]") #ci serve per eseguire la query
}

type Article @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  writerId: ID!  # Può essere l'id dello user o del gruppo
    @index(
      name: "byWriter"
      queryField: "listArticlesByWriter"
      sortKeyFields: ["publishedAt"]
    )
  type: String
    @default(value: "_article")
    @index(
      name: "byDate"
      queryField: "listArticlesByDate"
      sortKeyFields: ["publishedAt"]
    )
  user: User @belongsTo(fields: ["writerId"])
  group: Group @belongsTo(fields: ["writerId"]) #
  title: String!
  content: String!
  coverKey: String!
  tagIDS: String @default(value: "[]")
  publishedAt: AWSDateTime
  latitude: Float
  longitude: Float
  viewsCount: Int
  viewersIDS: String
  likes: [Like] @hasMany
  comments: [Comment] @hasMany
}

type Event @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  organizerId: ID!
    @index(
      name: "byOrganizer"
      queryField: "listEventsByOrganizer"
      sortKeyFields: ["startsAt"]
    )
  user: User @belongsTo(fields: ["organizerId"])
  group: Group @belongsTo(fields: ["organizerId"]) #
  type: String
    @default(value: "_event")
    @index(
      name: "byPartecipations"
      queryField: "listEventsByPartecipations"
      sortKeyFields: ["partecipationsCount"]
    )
  partecipationsCount: Int @default(value: "0")
  partecipations: [Partecipation] @hasMany
  title: String!
  description: String!
  label: String
  url: String
  startsAt: AWSDateTime!
  address: String!
  location: String!
  latitude: Float!
  longitude: Float!
  coverKey: String
  tagIDS: String #ci serve per eseguire la query
  tags: String #ci serve per visualizzare i tag nell'evento
  likes: [Like] @hasMany
  comments: [Comment] @hasMany
}

type Invitation @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  proposerId: ID!
    @index(
      name: "byProposer"
      queryField: "listInvitationsByProposer"
      sortKeyFields: ["startsAt"]
    )
  # proposerId: ID!
  #   @index(
  #     name: "byProposer"
  #     queryField: "listInvitationsByProposer"
  #     sortKeyFields: ["startsAt", "eventId"]
  #   )
  proposer: User @hasOne(fields: ["proposerId"])
  receivers: [User] @hasMany(fields: "receiverId")
  receiverId: ID!
    @index(
      name: "byReceiver"
      queryField: "listInvitationsByReceiver"
      sortKeyFields: ["startsAt"]
    )
  # eventId: ID!
  message: String
  event: Event @hasOne
  # event: Event @hasOne(fields: "eventId")
  startsAt: AWSDateTime!
}

type Notification
  @model(subscriptions: null)
  @auth(rules: [{ allow: private }]) {
  id: ID!
  receiverId: ID!
    @index(
      name: "notificationByUser"
      queryField: "listNotificationByUser"
      sortKeyFields: ["createdAt"]
    )
  senderId: ID!
  senderName: String!
  header: String!
  body: String!
  objectId: ID!
  type: String
  createdAt: AWSDateTime!
}

type Partecipation
  @model(subscriptions: null)
  @auth(rules: [{ allow: private }]) {
  id: ID!
  partecipantName: String!
  partecipantAvatarKey: String
  count: Int!
}

type Like @model @auth(rules: [{ allow: private }]) {
  id: ID!
  counts: Int!
  ownerId: String!
  ownerName: String!
}

type Comment @model @auth(rules: [{ allow: private }]) {
  id: ID!
  ownerId: ID!
  ownerName: String!
  ownerAvatarKey: String
  content: String!
}

type Referral @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  code: ID! @primaryKey
  ownerId: ID! @index(name: "referralByUser", queryField: "getReferralByUser")
  owner: User @hasOne(fields: ["ownerId"])
  count: Int #Number of times code gets used
}

type FollowRelationship
  @model(subscriptions: null)
  @auth(rules: [{ allow: private }]) {
  followedId: ID! @primaryKey(sortKeyFields: ["followerId"])
  followerId: ID! @index(name: "byFollower", queryField: "listFollowByFollower")
  follower: User @hasOne(fields: ["followerId"])
  followed: User @hasOne(fields: ["followedId"])
}

type Consent @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  userId: ID!
  username: String!
  acceptedPrivacyPolicy: Boolean!
  acceptedCookiePolicy: Boolean!
  acceptedTermsAndConditions: Boolean!
  privacyPolicyURL: String
  cookiePolicyURL: String
  termsAndConditionsURL: String
}
# Segnalazione degli utenti
type Report @model(subscriptions: null) @auth(rules: [{ allow: private }]) {
  id: ID!
  userId: ID!
  username: String!
  reportedEventId: ID!
  reportedUserId: ID!
  reason: String!
  description: String
}

type VerifiedPhoneNumbers @model @auth(rules: [{ allow: private }]) {
  phoneNumber: String! @primaryKey
  userId: ID!
}
   